
doctype 5
html
  head
    title= title
    link(rel='stylesheet', href='/stylesheets/reset.css')
    link(rel='stylesheet', href='/stylesheets/style.css')
    script(text="javascript", src="https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js")
    script(text="javascript", src="/socket.io/socket.io.js")
    script(text="javascript")

      var sent = 0
        , rcvt = 0
        , times = 0
        , number = 0
        , sendMM = false
        , contWS = 0
        , contWSS = 0
        , socketWS = null
        , socketWSS = null
        , centinelWS = false
        , centinelWSS = false
        , msgsCounter = 0
        , WSRegistered = false
        , WSSRegistered = false
        , setIntervalVar = null;

      /*--------------------*/
      /*--------------------*/
      function sendMsgs(){
        sendMM = false;
        if($("input[name=group]:checked").val()){
          var msg = $('#inputmsg').val();
          updateSentMsgs();
          if($('#rdWS').is(':checked')){
            socketWS.emit('send',msg);
            if(contWS == 0){
              WSMessage();
              contWS++;
            }
          }else if($('#rdWSS').is(':checked')){
            socketWSS.emit('send',msg);
            if(contWSS == 0){
              WSSMessage();
              contWSS++;
            }
          }
        }else{
          alert("You must select a connection to run test.");
        }
      }

      /*--------------------*/
      /*--------------------*/
      function sendMany(){
        sendMM = true;
        msgsCounter = 0;
        var msgsPerBlast = $('#inputOne').val()
          , interval = $('#inputTwo').val()
          , blastCount = $('#inputTree').val(); 
        if($("input[name=group]:checked").val()){
          if((msgsPerBlast == "")||(isNaN(msgsPerBlast))){
            alert('Msgs per Blast not specified.');
          }else if((interval == "")||(isNaN(interval))){
            alert('Interval not specified.');
          }else if((blastCount == "")||(isNaN(blastCount))){
            alert('Blast Count not specified.');
          }else{
             number = parseInt($('#inputOne').val());
             times =  parseInt($('#inputTree').val());
             var interval = parseInt($('#inputTwo').val());            
             setIntervalVar = setInterval(sendManyMessages,interval);            
          }
        }else{
          alert("You must select a connection to run test.");
        }
      }
   

      var sendManyMessages = function(){
        for(var i=0; i<number; i++){
          if($('#rdWS').is(':checked')){
            socketWS.emit('send',$('#inputmsg').val());
            updateSentMsgs();
            if(contWS == 0){
              WSMessage();
              contWS++;
            }
          }else if($('#rdWSS').is(':checked')){
            socketWSS.emit('send',$('#inputmsg').val());
            updateSentMsgs();
            if(contWSS == 0){
              WSSMessage(); 
              contWSS++;
            }
          }
        }        
      }

      /*--------------------*/
      /*--------------------*/
      function ws(){                 
        contWS = 0;
        if(!centinelWS){
          socketWS = io.connect($('#ws').val(), {secure: false, port: '7171'});
          socketWS.emit('connect');
        }
        if(!WSRegistered){
          socketWS.on('established', function(data){
            $('#logsInfo').append(data+'<br/>');
          });
          socketWS.on('restablished', function(data){
            $('#logsInfo').append(data+'<br/>');
          });
          socketWS.on('disconnected', function(data){
            $('#logsInfo').append(data+'<br/>');
          });
          WSRegistered = true;
        }
        if(socketWSS){
          socketWSS.disconnect();
          reset();
        }
        if(centinelWS){
          socketWS.socket.connect();
          socketWS.emit('reconnect');
        }
        centinelWS = true;
      }
  
      /*--------------------*/
      /*--------------------*/
      function wss(){        
        contWSS = 0;
        if(!centinelWSS){
          socketWSS = io.connect($('#wss').val(),{secure: true, port: '7272'});
          socketWSS.emit('connect');
        }
        if(!WSSRegistered){
          socketWSS.on('established', function(data){
            $('#logsInfo').append(data+'<br/>');
          });
          socketWSS.on('restablished', function(data){
            $('#logsInfo').append(data+'<br/>');            
          });
          socketWSS.on('disconnected', function(data){
            $('#logsInfo').append('{Websocket secure: disconnected}<br/>');
          });
          WSSRegistered = true;
        }
        if(socketWS){
          socketWS.disconnect();
          reset();
        }
        if(centinelWSS){
          socketWSS.socket.connect();
          socketWSS.emit('reconnect');
        }
        centinelWSS = true;
      }
  
      /*--------------------*/	 
      /*--------------------*/
      function WSMessage(){
        socketWS.on('message', function(message){
          appendMessage(message);
        });
      }
 
      /*--------------------*/
      /*--------------------*/
      function WSSMessage(){
        socketWSS.on('message', function(message){
          appendMessage(message);
        });
      }
      
      /*--------------------*/
      /*--------------------*/
      function appendMessage(message){
        $('#msgInfo').append('<h4>' + message + '</h4>');
        rcvt++;
        $('#msgRcvt').val(''+rcvt);
        if(sendMM){
          msgsCounter++;
          if(msgsCounter%number == 0){
            if(msgsCounter != number*times){
              $('#msgInfo').append('<h5 style="color: blue;"> ---> Waiting...</h4>');
            }else{
              $('#msgInfo').append('<h5 style="color: blue;"> ---> Test finished.</h4>');
            }
          }
          if(msgsCounter == (number*times)){
            clearInterval(setIntervalVar);
            msgsCounter = 0;
            sendMM = false;
          }
        }
      }

      /*--------------------*/
      /*--------------------*/
      function updateSentMsgs(){
        sent++;
        $('#msgSent').val(''+sent);
      }
       
      /*--------------------*/
      /*--------------------*/
      function reset(){
        sent = 0;
        rcvt = 0;
        contOne = 0;
        contMany = 0;
        msgsCounter = 0;
        $('#msgSent').val(''+sent);
        $('#msgRcvt').val(''+rcvt);
        document.getElementById('msgInfo').innerHTML = '';
      }
  body
    block content
